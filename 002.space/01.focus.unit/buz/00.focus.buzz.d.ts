export declare const initFocus: (cpy: FocusModel, bal: FocusBit, ste: State) => FocusModel;
export declare const readFocus: (cpy: FocusModel, bal: FocusBit, ste: State) => Promise<FocusModel>;
export declare const writeFocus: (cpy: FocusModel, bal: FocusBit, ste: State) => Promise<FocusModel>;
export declare const removeFocus: (cpy: FocusModel, bal: FocusBit, ste: State) => FocusModel;
export declare const deleteFocus: (cpy: FocusModel, bal: FocusBit, ste: State) => FocusModel;
export declare const listFocus: (cpy: FocusModel, bal: FocusBit, ste: State) => Promise<FocusModel>;
export declare const cornerFocus: (cpy: FocusModel, bal: FocusBit, ste: State) => Promise<FocusModel>;
export declare const centerFocus: (cpy: FocusModel, bal: FocusBit, ste: State) => Promise<void>;
export declare const locateFocus: (cpy: FocusModel, bal: FocusBit, ste: State) => Promise<FocusModel>;
export declare const selectFocus: (cpy: FocusModel, bal: FocusBit, ste: State) => Promise<FocusModel>;
export declare const openFocus: (cpy: FocusModel, bal: FocusBit, ste: State) => FocusModel;
export declare const modelFocus: (cpy: FocusModel, bal: FocusBit, ste: State) => Promise<FocusModel>;
import { FocusModel } from "../focus.model";
import FocusBit from "../fce/focus.bit";
import State from "../../99.core/state";
